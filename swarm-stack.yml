version: '3.8'

services:
  opentelemetry-collector:
    image: ${DOCKER_PROXY:-}otel/opentelemetry-collector-contrib
    volumes:
      - ${DATA_PATH}/otel/otel-collector.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "2003:2003" # Carbon receiver
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8006:8006" # fluentforward
      - "8086:8086" # InfluxDB receiver
      - "9411:9411" # zipkin extension
      - "13133:13133" # health_check extension
      - "14250:14250" # jaeger extension (model.proto)
      - "14268:14268" # jaeger extension (jaeger.thrift)
      - "54526:54526" # Syslog
      - "54526:54526/udp" # Syslog
      - "55678:55678" # OpenCensus receiver
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 10m
    deploy:
      update_config:
        order: start-first
  kafka:
    image: ${DOCKER_PROXY:-}bitnami/kafka:3.1.1
    stop_grace_period: 300s
    environment:
      KAFKA_ENABLE_KRAFT: 'yes'
      KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CFG_LISTENERS: 'PLAINTEXT://:9092,CONTROLLER://:9093'
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_BROKER_ID: '1'
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@127.0.0.1:9093'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - ${DATA_PATH}/otel/kafka:/bitnami/kafka
    ports:
      - "9092:9092"
    networks:
      - internal
    logging:
      driver: "json-file"
      options:
        max-file: 5
        max-size: 10m
  timescaledb:
    image: ${DOCKER_PROXY:-}timescale/timescaledb-ha:pg14-latest
    stop_grace_period: 300s
    command: -c 'max_connections=200'
    environment:
      POSTGRES_PASSWORD: timescaledb
    volumes:
      - ${DATA_PATH}/timescaledb:/home/postgres/pgdata
    ports:
      - "6399:5432"
    networks:
      - internal
    sysctls:
      - net.ipv4.tcp_keepalive_time=600
      - net.ipv4.tcp_keepalive_intvl=60
      - net.ipv4.tcp_keepalive_probes=60
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:8006"
        fluentd-async: 'true'
        fluentd-max-retries: '5'
        fluentd-sub-second-precision: 'true'
    deploy:
      replicas: 1
  promscale:
    image: ${DOCKER_PROXY:-}timescale/promscale:latest
    command:
      - -db.ssl-mode=disable
      - -db.host=timescaledb
      - -db.port=5432
      - -db.user=postgres
      - -db.password=timescaledb
      - -db.name=postgres
    ports:
      - "9201:9201"
    networks:
      - internal
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:8006"
        fluentd-async: 'true'
        fluentd-max-retries: '5'
        fluentd-sub-second-precision: 'true'
  timescale-exporter:
    image: ${DOCKER_PROXY:-}otel/opentelemetry-collector-contrib
    volumes:
      - ${DATA_PATH}/otel/timescale-exporter.yaml:/etc/otelcol-contrib/config.yaml
    networks:
      - internal
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:8006"
        fluentd-async: 'true'
        fluentd-max-retries: '5'
        fluentd-sub-second-precision: 'true'
    deploy:
      replicas: 1
  loki:
    image: ${DOCKER_PROXY:-}grafana/loki:2.6.0
    command: -config.file=/loki/config.yaml
    volumes:
      - ${DATA_PATH}/loki:/loki
    ports:
      - "3100:3100"
    networks:
      - internal
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:8006"
        fluentd-async: 'true'
        fluentd-max-retries: '5'
        fluentd-sub-second-precision: 'true'
  loki-exporter:
    image: ${DOCKER_PROXY:-}otel/opentelemetry-collector-contrib
    volumes:
      - ${DATA_PATH}/otel/loki-exporter.yaml:/etc/otelcol-contrib/config.yaml
    networks:
      - internal
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:8006"
        fluentd-async: 'true'
        fluentd-max-retries: '5'
        fluentd-sub-second-precision: 'true'
  grafana:
    image: ${DOCKER_PROXY:-}grafana/grafana
    environment:
      GF_SERVER_ROOT_URL: 'https://grafana.example.com'
    ports:
      - "3000:3000"
    volumes:
      - ${DATA_PATH}/grafana/data:/var/lib/grafana
      - ${DATA_PATH}/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - internal
    logging:
      driver: "fluentd"
      options:
        fluentd-address: "127.0.0.1:8006"
        fluentd-async: 'true'
        fluentd-max-retries: '5'
        fluentd-sub-second-precision: 'true'

networks:
  internal:
    driver: overlay
